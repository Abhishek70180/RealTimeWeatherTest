<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Forecast</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }
        h1 {
            color: #17a2b8;
            margin-bottom: 20px;
        }
        form {
            margin-bottom: 20px;
        }
        label {
            color: #333;
            font-weight: bold;
            margin-right: 10px;
        }
        input[type="text"] {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }
            input[type="text"]:focus {
                outline: none;
                border-color: #17a2b8;
            }
        button {
            padding: 8px 20px;
            background-color: #17a2b8;
            color: #fff;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
            button:hover {
                background-color: #138496;
            }
        #errorMessage {
            color: red;
            display: none;
            margin-top: 5px;
        }
        #weatherContainer {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
        }
        #weatherInfo {
            text-align: center;
            color: #333;
        }
        #map {
            height: 200px;
            width: 80%;
            margin-bottom: 20px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }
    </style>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
</head>
<body>
    <h1>Weather Forecast</h1>
    <form method="get" action="@Url.Action("GetWeatherForecast", "Home")">
        <div>
            <label for="cityName">Enter State name or zip code:</label>
            <input type="text" id="cityName" name="cityName" required>
            <button type="submit">Search</button>
            <p id="errorMessage">Please enter a maximum of 20 alphabetic characters.</p>
        </div>
    </form>
    <div id="weatherContainer">
        <div id="map"></div>
        <div id="weatherInfo"></div>
    </div>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        const apiKey = "8d6d4d65768721012b19680c6e14b805";
        document.addEventListener("DOMContentLoaded", () => {
            const map = L.map('map').setView([51.505, -0.09], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        map.setView(pos, 13);
                        L.marker(pos).addTo(map).bindPopup("Your Location").openPopup();
                        fetchWeatherData(pos.lat, pos.lng);
                    },
                    () => {
                        handleLocationError(true, map.getCenter());
                    }
                );
            } else {
                handleLocationError(false, map.getCenter());
            }
        });

        function handleLocationError(browserHasGeolocation, pos) {
            const errorMessage = browserHasGeolocation
                ? "Error: The Geolocation service failed Check your internet connection."
                : "Error: Your browser doesn't support geolocation.";
            console.error(errorMessage);
            alert(errorMessage);
        }

        function fetchWeatherData(lat, lon) {
            const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`;
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    displayWeatherData(data);
                })
                .catch(error => {
                    console.error("Error fetching weather data:", error);
                });
        }

        function displayWeatherData(data) {
            const weatherInfo = document.getElementById("weatherInfo");
            const tempC = data.main.temp;
            const tempF = (tempC * 9 / 5 + 32).toFixed(2);
            const humidity = data.main.humidity;
            const windSpeed = data.wind.speed;
            const weatherCondition = `${data.weather[0].main} - ${data.weather[0].description}`;
            const locationName = data.name;
            weatherInfo.innerHTML = `
                                <h2>Current Weather in ${locationName}</h2>
                                <p>Temperature: ${tempC} °C (${tempF} °F)</p>
                                <p>Humidity: ${humidity} %</p>
                                <p>Wind Speed: ${windSpeed} m/s</p>
                                <p>Condition: ${weatherCondition}</p>
                            `;
        }
    </script>
</body>
</html>
